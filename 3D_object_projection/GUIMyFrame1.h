#ifndef __GUIMyFrame1__
#define __GUIMyFrame1__

/**
@file
Subclass of MyFrame1, which is generated by wxFormBuilder.
*/

#include "GUI.h"

//// end generated include

#include <wx/filedlg.h>
#include <wx/dcmemory.h>
#include <wx/dcclient.h>
#include <wx/dcbuffer.h>
#include <wx/colourdata.h>
#include <wx/colordlg.h>
#include <wx/msgdlg.h>
#include "vecmat.h"
#include <fstream>
#include <string>

class GUIMyFrame1;

struct Point {
float x, y, z;
Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z) {}
};

struct Color {
int R, G, B;
Color(int _R, int _G, int _B) : R(_R), G(_G), B(_B) {}
};

struct Segment {
Point begin, end;
Color color;
Segment(Point _begin, Point _end, Color _color) : begin(_begin), end(_end), color(_color) {}
};

struct Window {
double x_begin, x_end, y_begin, y_end;
};

struct ProjectionParameters
{
Vector4 vec_VRP;
Vector4 vec_VPN;
Vector4 vec_VUP;
Vector4 vec_PRP;
double front;
double back;
Window window_size;
Vector4 vec_center_camera;

bool SetCenter(GUIMyFrame1* frame); //returns true if center is succesfully counted
double GetRight() const;
double GetLeft() const;
double GetTop() const;
double GetBottom() const;
double GetNear() const;
double GetFar() const;
};


/** Implementing MyFrame1 */
class GUIMyFrame1 : public MyFrame1
{
	protected:
		// Handlers for MyFrame1 events.
		void WxPanel_Repaint( wxUpdateUIEvent& event );
		void Choice_Projection_1( wxCommandEvent& event );
		void Text_Update_1( wxCommandEvent& event );
		void Choice_Projection_2( wxCommandEvent& event );
		void Text_Update_2( wxCommandEvent& event );
		void Choice_Projection_3( wxCommandEvent& event );
		void Text_Update_3( wxCommandEvent& event );
		void m_button_load_geometry_click( wxCommandEvent& event );
		void Scrolls_Updated( wxScrollEvent& event );
	public:
		/** Constructor */
		GUIMyFrame1( wxWindow* parent );
	//// end generated class members
		void Repaint1();
		void Repaint2();
		void Repaint3();
		void RefreshPoints();
		void SetMatrix(Matrix4& matrix, Vector4& v_1, Vector4& v_2, Vector4& v_3, Vector4& v_4);//v_1 to v_4 are vertical vectors, this enable to easily set the matrix
		void ReadProjectionData1();
		void ReadProjectionData2();
		void ReadProjectionData3();

		Matrix4 PerspectiveProjection(const ProjectionParameters & projection);
		Matrix4 OrthogonalProjection(const ProjectionParameters & projection);
		Matrix4 OrthogonalProjectionUp(const ProjectionParameters& projection);
		Matrix4 OrthogonalProjectionDown(const ProjectionParameters& projection);
		Matrix4 OrthogonalProjectionFront(const ProjectionParameters& projection);
		Matrix4 LookAt(const ProjectionParameters& projection);

		void SetOrtogonalProjectionUpData1();
		void SetOrtogonalProjectionUpData2();
		void SetOrtogonalProjectionUpData3();
		void SetOrtogonalProjectionDownData1();
		void SetOrtogonalProjectionDownData2();
		void SetOrtogonalProjectionDownData3();
		void SetOrtogonalProjectionFrontData1();
		void SetOrtogonalProjectionFrontData2();
		void SetOrtogonalProjectionFrontData3();


		void EnableProjectionData1();
		void EnableProjectionData2();
		void EnableProjectionData3();

		std::vector<Segment> data;
		std::vector<Segment> data_transformed;

		ProjectionParameters projection_1;
		ProjectionParameters projection_2;
		ProjectionParameters projection_3;

		enum projection_type {perspective, axonometric_izo, axonometric_any, oblique_cabinet, oblique_cavalier, oblique_any, ortogonal_front,ortogonal_up, ortogonal_down };


};

#endif // __GUIMyFrame1__